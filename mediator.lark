?start: program

program: statement*

?statement: typedef
          | function
          | automaton
          | system

typedef: "typedef" type ("init" term)? "as" ID ";"

function: "function" template? ID func_interface "{" var_block? "statements" "{" assign_stmt* return_stmt "}" "}"

func_interface: "(" param* ")" ":" output_type
param: ID ":" input_type
input_type: type
output_type: type

return_stmt: "return" expr ";"

assign_stmt: term ":=" expr ";"

automaton: "automaton" template? ID "(" port* ("," port)* ")" "{" var_block? trans_block? "}"

port: ID ":" port_decl

trans_block: "transitions" "{" trans_decl* "}"
trans_decl: guarded_stmt | "group" "{" guarded_stmt* "}"
guarded_stmt: expr "->" (stmt | "{" stmt* "}")

?stmt: assign_stmt
     | sync_stmt

sync_stmt: "sync" ID ";"

system: "system" template? ID "(" port* ")" "{" internals? component_block? "connections" "{" connection* "}" "}"

internals: "internals" ID ("," ID)* ";"
component_block: "components" "{" component_decl* "}"
component_decl: ID+ ":" system_type ";"

connection: ID template_args? "(" term ("," term)* ")" ";"
          | port "->" port ";"

template: "<" template_param ("," template_param)* ">"
template_param: ID ":" parameter_type

parameter_type: type                    -> concrete_type_param
              | "type"                  -> abstract_type_param
              | "interface" "(" port_decl ("," port_decl)* ")" -> interface_type_param
              | "func" "(" type ("," type)* ")" ":" type       -> function_type_param

port_decl: (DIRECTION) type
DIRECTION: "in" | "out"

var_block: "variables" "{" var_decl* "}"
var_decl: ID ":" type ("init" expr)? ";"
array_size: expr

?type: ID template_args?      -> type_ref
     | primitive_type
     | composite_type

primitive_type: "int"           -> int
        | bounded_int 
        | "real"                -> real
        | "bool"                -> bool
        | "char"                -> char
        | enum_type
bounded_int: "int" expr ".." expr ("init" expr)?
enum_type: "enum" "{" ID ("," ID)* "}"

composite_type: "(" type ("," type)+ ")"        -> tuple
    | "(" type "|" type ")"         -> union
    | type "[" [expr] "]"           -> array
    | "map" "[" type "]" type       -> map
    | "struct" "{" field_decl ("," field_decl)* "}"     -> struct

field_decl: ID ":" type

term: literal
    | ID
    | ID "(" [term ("," term)*] ")"
    | "struct" "{" [field_assign ("," field_assign)*] "}"       -> struct
    | "[" [term ("," term)*] "]"
    | "map" "[" [map_entry ("," map_entry)*] "]"        -> map
    | term "." ID
    | term "[" expr "]" 

field_assign: ID "=" term
map_entry: term "=>" term

literal: SIGNED_NUMBER  -> number
       | ESCAPED_STRING -> string
       | "true"         -> bool_t
       | "false"        -> bool_f

expr: term                             -> expr_term
    | "(" expr ")"
    | expr "&&" expr                   -> and_expr
    | expr "||" expr                   -> or_expr
    | expr "==" expr                   -> eq_expr
    | expr "!=" expr                   -> neq_expr
    | expr ">" expr                    -> gt_expr
    | expr "<" expr                    -> lt_expr
    | expr ">=" expr                   -> ge_expr
    | expr "<=" expr                   -> le_expr
    | expr "+" expr                    -> add_expr
    | expr "-" expr                    -> sub_expr
    | expr "*" expr                    -> mul_expr
    | expr "/" expr                    -> div_expr
    | expr "%" expr                    -> mol_expr
    | "!" expr                         -> not_expr

system_type: ID template_args?
template_args: "<" term ("," term)* ">"

SIGNED_NUMBER: /[0-9_](.[0-9_])*/
ESCAPED_STRING: /[a-zA-Z_]+/
ID: /[a-zA-Z_][a-zA-Z0-9_]*/
COMMENT: /\/\/.*/
%ignore COMMENT
%ignore /[\t \f\r\n]+/
